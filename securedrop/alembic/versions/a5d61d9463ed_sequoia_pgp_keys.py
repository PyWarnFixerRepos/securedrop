"""sequoia_pgp_keys

Revision ID: a5d61d9463ed
Revises: b7f98cfd6a70
Create Date: 2022-08-29 23:28:06.000520

"""
import sqlalchemy as sa
from alembic import op
from gpg_encryption import GpgEncryptionManager, GpgKeyNotFoundError

# revision identifiers, used by Alembic.
revision = "a5d61d9463ed"
down_revision = "b7f98cfd6a70"
branch_labels = None
depends_on = None


def upgrade() -> None:
    with op.batch_alter_table("sources", schema=None) as batch_op:
        batch_op.add_column(sa.Column("fingerprint", sa.String(length=40), nullable=True))
        batch_op.add_column(sa.Column("private_key", sa.Text(), nullable=True))
        batch_op.add_column(sa.Column("public_key", sa.Text(), nullable=True))

    # First we export the journalist public key
    gpg = GpgEncryptionManager.get_default()
    (gpg.gpg_key_dir / "journalist.pub").write_text(gpg.get_journalist_public_key())

    # Now we migrate all the sources
    conn = op.get_bind()
    results = conn.execute("SELECT filesystem_id FROM sources")
    for row in results:
        filesystem_id = row[0]
        # Fetch key out of the keyring if possible
        try:
            fingerprint = gpg.get_source_key_fingerprint(filesystem_id)
            public_key = gpg.get_source_public_key(filesystem_id, fingerprint)
        except GpgKeyNotFoundError:
            continue

        # Save to database...
        conn.execute(
            sa.text(
                """\
            UPDATE sources
            SET fingerprint=:fingerprint AND public_key=:public_key:
            WHERE filesystem_id=:filesystem_id:
            """
            ).bindparams(
                fingerprint=fingerprint, public_key=public_key, filesystem_id=filesystem_id
            )
        )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("sources", schema=None) as batch_op:
        batch_op.drop_column("public_key")
        batch_op.drop_column("private_key")
        batch_op.drop_column("fingerprint")

    # ### end Alembic commands ###
